import time
import numpy as np
# fill with -1 if invalid


# Function to Find the entry in the Grid that is still  not used
# Searches the grid to find an entry that is still unassigned. If
# found, the reference parameters row, col will be set the location
# that is unassigned, and true is returned. If no unassigned entries
# remain, false is returned.
# 'l' is a list  variable that has been passed from the solve_sudoku function
# to keep track of incrementation of Rows and Columns
def find_empty_location(arr, l):
    for col in range(9):
        for row in range(9):
            if arr[row][col] == 0:
                l[0] = row
                l[1] = col
                return True
    return False


# Checks whether it will be legal to assign num to the given row,col
#  Returns a boolean which indicates whether it will be legal to assign
#  num to the given row,col location.
def check_location_is_safe(arr, row, col, num):
    possible_values = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    values = checker(possible_values, arr, col, row)

    for i in range(0, len(values)):
        if int(values[i]) == num:
            return True
    return False


# Takes a partially filled-in grid and attempts to assign values to
# all unassigned locations in such a way to meet the requirements
# for Sudoku solution (non-duplication across rows, columns, and boxes)
def solve_sudoku_recurisvely(arr, whitelist_array):
    # 'l' is a list variable that keeps the record of row and col in find_empty_location Function
    l = [0, 0]

    # If there is no unassigned location, we are done
    if not find_empty_location(arr, l):
        print(arr)
        return True

    # Assigning list values to row and col that we got from the above Function
    row = l[0]
    col = l[1]

    # splits whitelist_array into seperate digits
    poss_arr = get_possible_values_list(whitelist_array, col, row)

    # check if empty then invalid sudoku
    # return false

    # iterate through possible values
    for i in range(0, len(poss_arr)):  # change to only consider the possible values for that square
        # print(poss_arr)
        # print(poss_arr[i])
        num = int(poss_arr[i])
    # for num in range(0, 10):

        # if looks promising
        if check_location_is_safe(arr, row, col, num):

            # make tentative assignment
            arr[row][col] = num

            if solve_sudoku_recurisvely(arr, whitelist_array):
                return True

            # failure, unmake & try again
            arr[row][col] = 0

    # this triggers backtracking
    # print("back")
    return False


def get_possible_values_list(whitelist_array, col, row):
    possible_values_list = []
    for i in range(0, len(str(whitelist_array[row][col]))):
        possible_values_list.append(str(whitelist_array[row][col])[i])
    return possible_values_list


# potential to run multipule times (until no changes)
def get_whitelist(arr):
    whitelist_array = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       ]
    for y in range(0, 9):
        for x in range(0, 9):
            if arr[y][x] == 0:
                possible_values = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                possible_values = checker(possible_values, arr, x, y)
                whitelist_array[y][x] = ''.join(map(str, possible_values))
            else:
                whitelist_array[y][x] = arr[y][x]
    # print(np.asarray(whitelist_array))
    return whitelist_array


def checker(possible_values, arr, x, y):
    possible_values = row_checker(arr[y], possible_values)                      # check the row
    possible_values = col_checker(column(arr, x), possible_values)              # check the col
    possible_values = unit_checker(unit_square_builder(y, x, arr), possible_values)  # check the unit square
    return possible_values


def column(matrix, i):
    return [row[i] for row in matrix]


def matches(value):
    for z in range(1, 10):  # range of correct possible values is 1 to 9
        if value == z:
            return z
    return -1


def row_checker(row, possible_values):

    for x in range(0, len(row)):
        z = matches(row[x])
        if z >= 1:
            try:
                possible_values.remove(z)
            except:
                pass
    return possible_values


def col_checker(col, possible_values):
    for y in range(0, len(col)):
        z = matches(col[y])
        if z >= 1:
            try:
                possible_values.remove(z)
            except:
                pass
    return possible_values


def unit_square_builder(y, x, question):

    local_y = y % 3
    local_x = x % 3

    y = y - local_y
    x = x - local_x

    unit = [[question[y][x], question[y][x + 1], question[y][x + 2]],
            [question[y + 1][x], question[y + 1][x + 1], question[y + 1][x + 2]],
            [question[y + 2][x], question[y + 2][x + 1], question[y + 2][x + 2]]]
    return unit


def unit_checker(unit, possible_values):
    for y in range(0, 3):
        for x in range(0, 3):
            z = matches(unit[y][x])
            if z >= 1:
                try:
                    possible_values.remove(z)
                except:
                    pass
    return possible_values


def solve(question):
    arr = question.astype(int)
    solve_sudoku_recurisvely(arr, get_whitelist(arr))
    return arr


questions = np.load('sudokus.npy')
solutions = np.load('solutions.npy')

t0 = time.time()

for i in range(0, 100):
    print(np.array_equal(solve(questions[i]), solutions[i]))

t1 = time.time()
total = t1-t0

print(total)
